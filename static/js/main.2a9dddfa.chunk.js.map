{"version":3,"sources":["components/celda.tsx","components/tablero.tsx","components/game.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/fondo.jpg"],"names":["Celda","props","react","className","data-jugador","value","onClick","handleCelClick","Tablero","celdas","map","celda","i","components_celda","key","id","InitialState","jugadores","name","identifier","turno","gameFinish","movimientos","gameWin","Game","state","switchPlayerTurn","_this$state","_this","next_player","setState","validateGameFinish","newCeldas","index","_this$state2","Object","toConsumableArray","restartGame","_this$state3","this","react_default","a","createElement","concat","tablero","Component","App","src","fondo","game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.2a9dddfa.chunk.js","sourcesContent":["import * as React from \"react\";\n\ntype CeldaProps = {\n  id: Number;\n  value?: Object;\n  handleCelClick: any;\n};\n\nconst Celda = (props: CeldaProps) => (\n  <div\n    className=\"celda\"\n    data-jugador={props.value}\n    onClick={props.handleCelClick}\n  />\n);\n\nexport default Celda;\n\n//{props.id}\n","import * as React from \"react\";\nimport Celda from \"./celda\";\n\ntype TableroProps = {\n  celdas: String[];\n  handleCelClick: any;\n};\n\nconst Tablero = (props: TableroProps) => {\n  return (\n    <div className=\"tablero\">\n      {props.celdas.map((celda, i) => (\n        <Celda\n          key={i}\n          id={i}\n          value={celda}\n          handleCelClick={props.handleCelClick(i)}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Tablero;\n","import React, { Component } from \"react\";\nimport Tablero from \"./tablero\";\nimport Jugador from \"./jugador\";\n\ntype Jugador = {\n  name: String;\n  identifier: String;\n  age?: Number;\n};\n\ninterface IGame {\n  celdas: String[];\n  jugadores: Jugador[];\n  turno: Jugador;\n  gameFinish: Boolean;\n  gameWin: Boolean;\n  movimientos: Number;\n}\n\nconst InitialState = {\n  celdas: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n  jugadores: [{ name: \"X\", identifier: \"X\" }, { name: \"O\", identifier: \"O\" }],\n  turno: { name: \"X\", identifier: \"X\" },\n  gameFinish: false,\n  movimientos: 0,\n  gameWin: false,\n};\n\nclass Game extends Component<{}, IGame> {\n  public state = InitialState;\n\n  public switchPlayerTurn = () => {\n    const { turno, jugadores } = this.state;\n    //actualizar turno\n    let next_player = jugadores[0];\n    if (turno.identifier == \"X\") {\n      // X [0]\n      next_player = jugadores[1];\n    }\n    if (turno.identifier == \"O\") {\n      //O [1]\n      next_player = jugadores[0];\n    }\n    this.setState({ turno: next_player });\n  };\n\n  public validateGameFinish = (newCeldas: String[], movimientos: Number) => {\n    //Validar Horizontales: 0,1,2 - 3,4,5 - 6-7-8\n    if (\n      newCeldas[0] === newCeldas[1] &&\n      newCeldas[1] === newCeldas[2] &&\n      newCeldas[2] !== \"\"\n    ) {\n      this.setState({ gameFinish: true, gameWin: true });\n      return true;\n    }\n    if (\n      newCeldas[3] === newCeldas[4] &&\n      newCeldas[4] === newCeldas[5] &&\n      newCeldas[5] !== \"\"\n    ) {\n      this.setState({ gameFinish: true, gameWin: true });\n\n      return true;\n    }\n    if (\n      newCeldas[6] === newCeldas[7] &&\n      newCeldas[7] === newCeldas[8] &&\n      newCeldas[8] !== \"\"\n    ) {\n      this.setState({ gameFinish: true, gameWin: true });\n      return true;\n    }\n    //Validar Verticales: 0,3,6 - 1,4,7 - 2,5,8\n    if (\n      newCeldas[0] === newCeldas[3] &&\n      newCeldas[3] === newCeldas[6] &&\n      newCeldas[6] !== \"\"\n    ) {\n      this.setState({ gameFinish: true, gameWin: true });\n      return true;\n    }\n    if (\n      newCeldas[1] === newCeldas[4] &&\n      newCeldas[4] === newCeldas[7] &&\n      newCeldas[7] !== \"\"\n    ) {\n      this.setState({ gameFinish: true, gameWin: true });\n      return true;\n    }\n    if (\n      newCeldas[2] === newCeldas[5] &&\n      newCeldas[5] === newCeldas[8] &&\n      newCeldas[8] !== \"\"\n    ) {\n      this.setState({ gameFinish: true, gameWin: true });\n      return true;\n    }\n    //Validar Diagonales 0,4,8  - 2,4,6\n    if (\n      newCeldas[0] === newCeldas[4] &&\n      newCeldas[4] === newCeldas[8] &&\n      newCeldas[8] !== \"\"\n    ) {\n      this.setState({ gameFinish: true, gameWin: true });\n      return true;\n    }\n    if (\n      newCeldas[2] === newCeldas[4] &&\n      newCeldas[4] === newCeldas[6] &&\n      newCeldas[6] !== \"\"\n    ) {\n      this.setState({ gameFinish: true, gameWin: true });\n      return true;\n    }\n    if (movimientos === 9) {\n      this.setState({ gameFinish: true });\n    }\n    return false;\n  };\n\n  public handleCelClick = (index: any) => () => {\n    const { turno, celdas, gameFinish } = this.state;\n    if (!gameFinish && celdas[index] === \"\") {\n      let newCeldas = [...celdas];\n      //actualizar tablero\n      newCeldas[index] = turno.identifier;\n      let movimientos = this.state.movimientos + 1;\n      this.setState({ celdas: newCeldas, movimientos });\n      const gameFinish = this.validateGameFinish(newCeldas, movimientos);\n      if (!gameFinish) {\n        this.switchPlayerTurn();\n      }\n    }\n  };\n\n  public restartGame = () => {\n    this.setState(InitialState);\n  };\n\n  render() {\n    const { celdas, jugadores, turno, gameFinish, gameWin } = this.state;\n    return (\n      <div>\n        {gameWin\n          ? `Juego ganado por ${turno.name}`\n          : gameFinish\n            ? \"Nadie gan√≥ el juego\"\n            : `Turno de ${turno.name}`}\n        <br />\n        <button onClick={this.restartGame}>Reiniciar Juego</button>\n        <br />\n        <Tablero celdas={celdas} handleCelClick={this.handleCelClick} />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport fondo from \"./assets/fondo.jpg\";\nimport \"./App.css\";\nimport Game from \"./components/game\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <img src={fondo} className=\"imagen\" />\n        <header className=\"App-header\">\n          <p> Juego del gato y raton </p>\n          <Game />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/fondo.36a064b5.jpg\";"],"sourceRoot":""}